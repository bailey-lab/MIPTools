#################################################################
##                         Jupyter App                         ##
#################################################################
%apprun jupyter
    # Exit if something fails or if have unset object
    set -eu

    # increase allowed number of open files to the hard limit of the machine
    ulimit -Sn $(ulimit -Hn)


    # Port forwarding setup
    nb_port=$(shuf -i 8000-9999 -n 1)
    # server_ip=$(hostname -i)
    server_ip=$(hostname -I | awk '{print $1}')
    server_user=$(whoami)@$(hostname -f)
    nb_dir=/opt

    help() {
        echo "Open an interactive Jupyter Notebook. The notebook can be used"
        echo "for post-wrangler mapping and variant calling."
        echo ""
        echo "Usage:"
        echo "  singularity run [options] --app jupyter <container>"\
        "[app_options]"
        echo ""
        echo "Options:"
        echo "  See 'singularity run'."
        echo ""
        echo "App Options:"
        echo "  -d    The notebook directory."
        echo "  -h    Print the help page."
        echo "  -p    The port to be used to load the Jupyter Notebook."
        echo ""
        echo "Examples:"
        echo "  # Set paths"
        echo "  $ resource_dir=/bin/MIPTools/base_resources"
        echo "  $ project_resources=/work/usr/DR1_project_resources"
        echo "  $ species_resources=/work/usr/pf_species_resources"
        echo "  $ wrangler_dir=/work/usr/wrangler"
        echo "  $ variant_dir=/work/usr/variant"
        echo ""
        echo "  # Run app"
        echo "  $ singularity run \\"
        echo "    -B \${resource_dir}:/opt/resources \\"
        echo "    -B \${project_resources}:/opt/project_resources \\"
        echo "    -B \${species_resources}:/opt/species_resources \\"
        echo "    -B \${wrangler_dir}:/opt/user/wrangled_data \\"
        echo "    -B \${variant_dir}:/opt/user/stats_and_variant_calling \\"
        echo "    --app jupyter <container>"
    }

    # Parse options
    while getopts "d:hp:" opt; do
        case ${opt} in
            d) nb_dir=${OPTARG} ;;
            h) help
               exit 1 ;;
            p) nb_port=${OPTARG} ;;
            *) help
               exit 1 ;;
        esac
    done

    # Save templates
    rsync /opt/resources/jupyter_notebooks/* /opt/user/stats_and_variant_calling --ignore-existing \
        --ignore-missing-args
    rsync /opt/resources/jupyter_notebooks/supplemental_jupyter_notebooks/* /opt/user/stats_and_variant_calling/supplemental_jupyter_notebooks --ignore-existing \
        --ignore-missing-args

    # Inform the user how to access the notebook
    echo "\nIf you are running this command from a remote server, you will need"
    echo "to forward the port to your local machine. To do so, run:\n"
    echo "ssh -fNL localhost:${nb_port}:${server_ip}:${nb_port}"\
    "${server_user}\n"

    # Run notebook
    jupyter notebook --notebook-dir=${nb_dir} --ip=${server_ip} \
            --port=${nb_port} --no-browser

##################################################################
##                         Wrangler App                         ##
##################################################################
%apprun wrangler
    while getopts "c:" opt; do
      case "${opt}" in
        c) general_cpu_cores=${OPTARG} ;;
      esac
    done
    snakemake_args="--cores $general_cpu_cores
                    --keep-going
                    --rerun-incomplete
                    --latency-wait 60
                    -d /opt/config"
    snakemake -s /opt/snakemake/wrangler_by_sample_setup.smk \
        $snakemake_args
    snakemake -s /opt/snakemake/wrangler_by_sample_finish.smk \
        $snakemake_args
    echo 'ulimit is'
    ulimit -n

##################################################################
##                     Check Run Stats App                      ##
##################################################################
%apprun check_run_stats
    while getopts "c:" opt; do
      case "${opt}" in
        c) general_cpu_cores=${OPTARG} ;;
      esac
    done
    snakemake_args="--cores $general_cpu_cores
                        --keep-going
                        --rerun-incomplete
                        --latency-wait 60
                        -d /opt/config"
    snakemake -s /opt/snakemake/02_check_run_stats.smk \
        $snakemake_args
    echo 'ulimit is'
    ulimit -n

##################################################################
##                     Variant Calling App                      ##
##################################################################
%apprun variant_calling
    while getopts "c:f:" opt; do
      case "${opt}" in
        c) general_cpu_cores=${OPTARG} ;;
        f) freebayes_cores=${OPTARG} ;;
      esac
    done
    snakemake_args="--cores $general_cpu_cores
                        --keep-going
                        --rerun-incomplete
                        --latency-wait 60
                        -d /opt/config"

    freebayes_args="--cores $freebayes_cores
                    --keep-going
                    --rerun-incomplete
                    --latency-wait 60
                    -d /opt/config"
    snakemake -s /opt/snakemake/02_check_run_stats.smk \
        $snakemake_args
    snakemake -s /opt/snakemake/03_generate_contigs.smk \
        $snakemake_args
    snakemake -s /opt/snakemake/04_run_freebayes.smk \
        $freebayes_args
    echo 'ulimit is'
    ulimit -n

##################################################################
##                    Basespace Download App                    ##
##################################################################
%apprun download
    # Exit if something fails
    set -eu

    # Set default values for paths
    output_path="/opt/analysis"
    config_path="/opt/resources/basespace.cfg"

    help() {
        echo "Download data from the Illumina BaseSpace Sequence Hub."
        echo ""
        echo "Usage:"
        echo "  singularity run [options] --app download <container>"\
        "[app_options]"
        echo ""
        echo "Options:"
        echo "  See 'singularity run'."
        echo ""
        echo "App Options:"
        echo "  -i    Required. The run ID of the data to download."
        echo "  -o    The path to the output directory."
        echo "        Default: '/opt/analysis'."
        echo "  -c    The path to the authentication credentials file."
        echo "        This file is created by 'bs auth'. For additional"
        echo "        information see the help page for that command."
        echo "        Default: '/opt/resources/basespace.cfg'."
        echo "  -h    Print the help page."
        echo ""
        echo "Examples:"
        echo "  # Set paths"
        echo "  $ resource_dir=/bin/MIPTools/base_resources"
        echo "  $ run_dir=/work/usr/example"
        echo ""
        echo "  # Run app"
        echo "  $ singularity run \\"
        echo "    -B \${resource_dir}:/opt/resources \\"
        echo "    -B \${run_dir}:/opt/analysis \\"
        echo "    --app download <container> -i <run_id>"
    }

    # Parse options
    while getopts "i:o:c:h" opt; do
      case "${opt}" in
        c) config_path=${OPTARG} ;;
        h) help
           exit 1 ;;
        i) run_id=${OPTARG} ;;
        o) output_path=${OPTARG} ;;
        *) help
           exit 1 ;;
      esac
    done

    # Ensure run_id is specified
    if [ -z ${run_id} ]; then
      echo "Argument -i must be provided"
      help >&2
      exit 1
    fi

    # Read data from config file
    # Remove whitespace from each line and export each line as a variable
    export BASESPACE_API_SERVER=$(sed "1q;d" ${config_path} | sed "s/.*=.//g")
    export BASESPACE_ACCESS_TOKEN=$(sed "2q;d" ${config_path} | sed "s/.*=.//g")

    # Download data
    bs download run --summary -i ${run_id} -o ${output_path}/${run_id}

#################################################################
##                   Superseded Download App                   ##
#################################################################
%apprun download_superseded
    # Exit if something fails or if have unset object
    set -eu

    help() {
        echo "Download data from the Illumina BaseSpace Sequence Hub."
        echo ""
        echo "Superseded Note:"
        echo "  Please note that this app has been superseded by the download"
        echo "  app, which uses the basespace command line interface for"
        echo "  downloading data."
        echo ""
        echo "Usage:"
        echo "  singularity run [options] --app download_superseded \\"
        echo "    <container> [app_options]"
        echo ""
        echo "Options:"
        echo "  See 'singularity run'."
        echo ""
        echo "App Options:"
        echo "  -h    Print the help page."
        echo "  -r    Required. The run ID of the data to download."
        echo ""
        echo "Additional Details:"
        echo "  An 'access_token.txt' file with a valid access token is"
        echo "  required. It must be present in the 'base_resources' directory."
        echo "  A data directory where the data will be downloaded to must be"
        echo "  mounted to '/opt/analysis'."
        echo ""
        echo "Examples:"
        echo "  # Set paths"
        echo "  $ resource_dir=/bin/MIPTools/base_resources"
        echo "  $ output_dir=/work/usr/downloaded"
        echo ""
        echo "  # Run app"
        echo "  $ singularity run \\"
        echo "    -B \${resource_dir}:/opt/resources"\
        "-B \${output_dir}:/opt/analysis \\"
        echo "    --app download_superseded <container> -r <run_id>"
    }

    while getopts "hr:" opt; do
        case ${opt} in
            h) help
               exit 1 ;;
            r) run_id=${OPTARG} ;;
            *) help
               exit 1 ;;
        esac
    done

    # Print to CLI
    echo "Downloading NextSeq run ${run_id} from BaseSpace."
    echo "Depending on the data size, this can take very long (up to 10 h)."
    echo "It is recommended to run this app in a screen (GNU screen)."
    echo "A message indicating the end of download will be printed when done."
    echo "Check nohup.out file in your output directory for the download log."

    # cd and run app
    # Use nohup to make command keep running even if get hangup signal
    cd /opt/analysis
    nohup python /opt/bin/BaseSpaceRunDownloader_v2.py \
     -r ${run_id} -a "$(cat /opt/resources/access_token.txt)"

    # Print to CLI
    echo "Download finished."

#################################################################
##                          Demux App                          ##
#################################################################
%apprun demux
    # Exit if something fails or if have unset object
    set -eu

    help() {
        echo "Demultiplex data. Generates per-sample fastq files from the raw"
        echo "sequence data consisting of bcl files."
        echo ""
        echo "Usage:"
        echo "  singularity run [options] --app demux <container> [app_options]"
        echo ""
        echo "Options:"
        echo "  See 'singularity run'."
        echo ""
        echo "App Options:"
        echo "  -h    Print the help page."
        echo "  -s    Required. Sample sheet for demultiplexing. "
        echo "        This file must be present in the directory mounted to "
        echo "        '/opt/analysis'."
        echo ""
        echo "Examples:"
        echo "  # Set paths"
        echo "  $ resource_dir=/bin/MIPTools/base_resources"
        echo "  $ bcl_dir=/work/usr/downloaded"
        echo "  $ fastq_root_dir=/work/usr/"
        echo ""
        echo "  # Run app"
        echo "  $ singularity run \\"
        echo "    -B \${resource_dir}:/opt/resources \\"
        echo "    -B \${bcl_dir}:/opt/data \\"
        echo "    -B \${fastq_root_dir}:/opt/analysis \\"
        echo "    --app demux <container> -s SampleSheet.csv"
    }

    while getopts "hs:" opt; do
        case ${opt} in
            h) help
               exit 1 ;;
            s) sample_list=${OPTARG} ;;
            *) help
               exit 1 ;;
        esac
    done

    # Define variables
    sample_sheet="/opt/analysis/${sample_list}"
    # cd to where bcl files are
    cd /opt/data

    # Create a fastq directory for saving fastqs
    mkdir -p /opt/analysis/fastq

    # Increase limit of open number of files.
    ulimit -Sn $(ulimit -Hn)

    # Run bcl2fastq
    # Use nohup to make command keep running even if get hangup signal
    nohup bcl2fastq -o /opt/analysis/fastq \
        --sample-sheet ${sample_sheet} \
        --no-lane-splitting

##################################################################
##                         Demux QC App                         ##
##################################################################
%apprun demux_qc
    # Exit if something fails or if have unset object
    set -eu

    help() {
        echo "Run quality control on demultiplexed data."
        echo ""
        echo "Usage:"
        echo "  singularity run [options] --app demux_qc <container>"\
        "[app_options]"
        echo ""
        echo "Options:"
        echo "  See 'singularity run'."
        echo ""
        echo "App Options:"
        echo "  -h    Print the help page."
        echo "  -p    Required. The sequencing platform used. Either 'miseq'"
        echo "        or 'nextseq'."
        echo ""
        echo "Examples:"
        echo "  # Set paths"
        echo "  $ resource_dir=/bin/MIPTools/base_resources"
        echo "  $ fastq_dir=/work/usr/example"
        echo ""
        echo "  # Run app"
        echo "  $ singularity run \\"
        echo "    -B \${resource_dir}:/opt/resources"\
        "-B \${fastq_dir}:/opt/analysis \\"
        echo "    --app demux_qc <container> -p 'nextseq'"
    }

    # Argument handling
    while getopts "hp:" opt; do
        case ${opt} in
            h) help
               exit 1 ;;
            p) platform=${OPTARG} ;;
            *) help
               exit 1 ;;
        esac
    done

    # Run python script
    python /opt/src/demux_qc.py -p ${platform}

#######################################################
## unlock snakemake ##
######################################################
%apprun unlock_snakemake
    snakemake -d /opt/config -s /opt/snakemake/wrangler_by_sample_setup.smk --unlock

    if [ -f /opt/user/wrangled_data/mip_ids/allMipsSamplesNames.tab.txt ]; then
        snakemake -d /opt/config -s /opt/snakemake/wrangler_by_sample_finish.smk --unlock
    fi

    snakemake -d /opt/config -s /opt/snakemake/02_check_run_stats.smk --unlock

    if [ -f /opt/user/stats_and_variant_calling/aligned_haplotypes.csv ]; then
        snakemake -d /opt/config -s /opt/snakemake/03_generate_contigs.smk --unlock
    fi

    if [ -f /opt/user/stats_and_variant_calling/freebayes_command_dict.yaml ]; then
        snakemake -d /opt/config -s /opt/snakemake/04_run_freebayes.smk --unlock
    fi

    if [ -f /opt/user/stats_and_variant_calling/freebayes_command_dict.yaml ]; then
        snakemake -d /opt/config -s /opt/snakemake/05_filter_variants.smk --unlock
    fi

######################################################
## get version ##
##########################################################33
%apprun check_version
    echo $VERSION