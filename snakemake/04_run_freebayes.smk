for line in open('/opt/build.sh','r'): 
	if 'mip_version=\"' in line: exec(line)
configfile: f'/opt/config/config_v{mip_version}.yaml'


output_folder = "/opt/user/stats_and_variant_calling"

import yaml
import subprocess

freebayes_command_dict_yaml = open(output_folder + "/freebayes_command_dict.yaml", "r")
freebayes_command_dict = yaml.safe_load(freebayes_command_dict_yaml)

if config["target_aa_annotation"]:
	target_aa_annotation = "/opt/project_resources/"+config["target_aa_annotation"]
	target_nt_annotation = None
elif config["target_nt_annotation"]:
	target_aa_annotation = None
	target_nt_annotation = "/opt/project_resources/"+config["target_nt_annotation"]
else:
	target_aa_annotation = None
	target_nt_annotation = None

rule all:
	input:
		ref_table=output_folder + "/reference_AN_table.csv",
		cov_table=output_folder + "/coverage_AN_table.csv",
		alt_table=output_folder + "/alternate_AN_table.csv",



rule run_freebayes:
	"""
	Takes the contigs generated by the generate_contigs script and runs freebayes on them
	"""
	output:
		contig_vcf=output_folder + "/contig_vcfs/{contig}.vcf.gz",
	params:
		wdir=output_folder,
		freebayes_command_dict=freebayes_command_dict,
	# resources below are currently not utilized - haven't figured out a way to
	# get singularity profile, slurm profile, and high ulimits all at once.
	resources:
		mem_mb=200000,
		nodes=16,
		time_min=5760,
		#log_dir=log_folder
	script:
		"scripts/run_freebayes.py"


rule concatenate_and_fix_vcf_headers:
	input:
		contig_vcf=expand(
			output_folder + "/contig_vcfs/{contig}.vcf.gz",
			contig=freebayes_command_dict.keys(),
		),
	output:
		variants=output_folder + "/variants.vcf.gz",
	params:
		freebayes_settings=config["freebayes_settings"],
		wdir=output_folder,
		settings_file="settings.txt",
	# resources below are currently not utilized - haven't figured out a way to
	# get singularity profile, slurm profile, and high ulimits all at once.
	resources:
		mem_mb=200000,
		nodes=16,
		time_min=5760,
		#log_dir=log_folder
	script:
		"scripts/concatenate_headers.py"

rule compress_vcf:
	'''
	compresses vcf file to be mutations only to avoid memory issues in next step
	'''
	input:
		original_vcf = output_folder + "/variants.vcf.gz"
	output:
		mutations_only_variants = output_folder + "/variants_mutations_only.vcf.gz",
	shell:
		"unpigz -c {input.original_vcf} | sed '/<\\*>/d' | pigz > {output.mutations_only_variants}"


rule generate_tables:
	input:
		variants = output_folder + "/variants_mutations_only.vcf.gz",
	output:
		ref_table=output_folder + "/reference_AN_table.csv",
		cov_table=output_folder + "/coverage_AN_table.csv",
		alt_table=output_folder + "/alternate_AN_table.csv",
	params:
		wdir=output_folder,
		settings_file="settings.txt",
		geneid_to_genename='/opt/project_resources/'+config["geneid_to_genename"],
		target_aa_annotation=target_aa_annotation,
		aggregate_nucleotides=config["aggregate_nucleotides"],
		aggregate_aminoacids=config["aggregate_aminoacids"],
		target_nt_annotation=target_nt_annotation,
		annotate=config["annotate"],
		decompose_options=config["decompose_options"],
		annotated_vcf=config["annotated_vcf"],
		aggregate_none=config["aggregate_none"],
		output_prefix=config["output_prefix"],
		min_site_qual=config["min_site_qual"]
	script:
		"scripts/generate_tables.py"
